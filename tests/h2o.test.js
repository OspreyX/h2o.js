// Generated by CoffeeScript 1.9.1
(function() {
  var _, delays_csv, dump, dump1, end, fail, flights_csv, h2o, keyOf, libh2o, ok, path, pathTo, test, transpiler, transpilerTestCases, typeOf, weather_csv;

  path = require('path');

  test = require('tape');

  _ = require('lodash');

  libh2o = require('../h2o.js');

  transpiler = require('../americano.js');

  transpilerTestCases = require('./americano.test.js');

  h2o = libh2o.connect();

  dump = function(a) {
    return console.log(JSON.stringify(a, null, 2));
  };

  test('transpiler.map', function(t) {
    var expected, func, i, len, message, ref, ref1, symbols;
    ref = transpilerTestCases.map;
    for (i = 0, len = ref.length; i < len; i++) {
      ref1 = ref[i], message = ref1[0], expected = ref1[1], symbols = ref1[2], func = ref1[3];
      if (expected === null) {
        t.throws((function() {
          return transpiler.map(symbols, func);
        }), void 0, message);
      } else {
        t.equal(transpiler.map(symbols, func), expected, message);
      }
    }
    return t.end();
  });

  dump1 = function(error, data) {
    if (error) {
      console.log('----------------- FAIL ----------------------');
      console.log(error.message);
      dump(error);
    }
    return dump(data);
  };

  pathTo = function(dir, file) {
    return path.join(__dirname, 'examples', 'data', dir, file);
  };

  flights_csv = pathTo('nyc2014', 'flights14.csv');

  delays_csv = pathTo('nyc2014', 'delays14.csv');

  weather_csv = pathTo('nyc2014', 'weather_delays14.csv');

  ok = function(t, f) {
    return function(error, result) {
      t.equal(error, null);
      if (f) {
        return f(result);
      }
    };
  };

  fail = function(t, f) {
    return function(error, result) {
      t.notEqual(error, null);
      if (f) {
        return f(error);
      }
    };
  };

  typeOf = function(obj) {
    return obj.__meta.schema_type;
  };

  keyOf = function(obj) {
    return obj.key.name;
  };

  end = function(t) {
    return h2o.removeAll(function() {
      return t.end();
    });
  };

  test.skip('importFrame(), getFrames()', function(t) {
    var flights;
    flights = h2o.importFrame({
      path: flights_csv
    });
    return flights(ok(t, function(flights) {
      var frames;
      t.equal(typeOf(flights), 'Frame');
      return frames = h2o.getFrames(ok(t, function(frames) {
        var frame;
        t.assert(_.isArray(frames));
        t.equal(frames.length, 1);
        frame = _.head(frames);
        t.equal(typeOf(frame), 'Frame');
        t.equal(keyOf(frame), keyOf(flights));
        return end(t);
      }));
    }));
  });

  test.skip('importFrame(), getFrame(key)', function(t) {
    var flights;
    flights = h2o.importFrame({
      path: flights_csv
    });
    return flights(ok(t, function(flights) {
      var frame;
      t.equal(typeOf(flights), 'Frame');
      frame = h2o.getFrame(keyOf(flights));
      return frame(ok(t, function(frame) {
        t.equal(typeOf(frame), 'Frame');
        t.equal(keyOf(frame), keyOf(flights));
        return end(t);
      }));
    }));
  });

  test('getFrame(non-string)', function(t) {
    t.plan(2);
    h2o.getFrame({}, fail(t));
    h2o.getFrame('', fail(t));
    return end(t);
  });

  test.skip('importFrame, getFrames, getFrame, getColumnSummary, getJobs, getJobs, removeFrame', function(t) {
    var dest1, dest2, dest3, flights, flights1, flights2, frames;
    flights = h2o.importFrame({
      path: flights_csv
    });
    frames = h2o.getFrames();
    flights1 = h2o.getFrame('flights14.hex');
    flights2 = h2o.getFrame(flights);
    dest1 = h2o.getColumnSummary(flights, 'dest');
    dest2 = h2o.getColumnSummary(flights1, 'dest');
    dest3 = h2o.getColumnSummary(flights3, 'dest');
    return dest1(ok(t, function(col1) {
      t.equal(typeOf(col1), 'Vec');
      return dest2(ok(t, function(col2) {
        t.equal(typeOf(col2), 'Vec');
        return dest3(ok(t, function(col3) {
          t.equal(typeOf(col3), 'Vec');
          return h2o.getJobs(ok(t, function(jobs) {
            var job, job0, job0Key;
            job0 = _.head(jobs);
            t.equal(typeOf(job0), 'Job');
            job = h2o.getJob(job0Key = keyOf(job0));
            return job(ok(t, function(job) {
              var removal;
              t.equal(typeOf(job), 'Job');
              t.equal(keyOf(job), job0Key);
              removal = removeFrame(flights);
              return removal(ok(t, function() {
                return end(t);
              }));
            }));
          }));
        }));
      }));
    }));
  });

  test.skip('createColumn', function(t) {
    var airlines, departureTime, departureTime1, departureTime2, departureTimes, savedFrame, subset, subset2, subset3, subset4;
    airlines = h2o.importFrame({
      path: 'AirlinesTrain.csv.zip'
    });
    departureTime = h2o.select(airlines, 'DepTime');
    departureTime1 = h2o.map(departureTime, function(a) {
      return a + 1;
    });
    departureTime2 = h2o.map(departureTime, function(a) {
      return 100 + a * 2;
    });
    departureTimes = h2o.bind([departureTime, departureTime1, departureTime2]);
    savedFrame = h2o.createFrame({
      name: "departed",
      columns: {
        "departure time": departureTime,
        "departure 1": departureTime1,
        "departure 2": departureTime2
      }
    });
    subset = h2o.filter(savedFrame, [departureTime1, departureTime2], function(dt1, dt2) {
      return dt1 > 1000 && dt2 > 3000;
    });
    subset2 = h2o.slice(subset, 20, 100);
    subset3 = h2o.slice(subset, 300, 400);
    subset4 = h2o.concat([subset2, subset3]);
    subset4(dump1);
    return t.end();
  });

  test.skip('createFrame', function(t) {
    var frame, parameters;
    parameters = {
      dest: 'frame-10000x100',
      rows: 10000,
      cols: 100,
      seed: 7595850248774472000,
      randomize: true,
      value: 0,
      real_range: 100,
      categorical_fraction: 0.1,
      factors: 5,
      integer_fraction: 0.5,
      binary_fraction: 0.1,
      integer_range: 1,
      missing_fraction: 0.01,
      response_factors: 2,
      has_response: true
    };
    t.plan(2);
    frame = h2o.createFrame(parameters);
    return frame(function(error, result) {
      t.equal(error, null);
      t.notEqual(result, null);
      return dump(result);
    });
  });

  test.skip('shutdown', function(t) {
    t.plan(1);
    return h2o.shutdown(function(error, result) {
      if (error) {
        return t.fail(dump(error));
      } else {
        return t.deepEqual(result, {
          __meta: {
            schema_name: 'ShutdownV2',
            schema_type: 'Shutdown',
            schema_version: 2
          }
        });
      }
    });
  });

}).call(this);
