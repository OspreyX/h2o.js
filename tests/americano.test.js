// Generated by CoffeeScript 1.9.1
(function() {
  var map;

  map = [
    ['Fails when arg is not a function', null, [], null], [
      'Fails on arity mismatch', null, ['A', 'B'], function(a) {
        return a * a;
      }
    ], [
      'Fails if body has multiple statements', null, ['A'], function(a) {
        a * a;
        return a * a;
      }
    ], ['Fails if body has no return', null, ['A'], function(a){ foo(bar); }], [
      'Fails if body has unknown identifier', null, ['A'], function(a) {
        return b;
      }
    ], ['Fails on sequence expressions', null, [], function(){ return (b = a, a); }], ['Fails on assignment expressions', null, [], function(){ return a = b; }], [
      '!', '(not %A)', ['A'], function(a) {
        return !a;
      }
    ], [
      '+', '(as.numeric %A)', ['A'], function(a) {
        return +a;
      }
    ], [
      '-', '(* %A #-1)', ['A'], function(a) {
        return -a;
      }
    ], [
      'Fails on unsupported unary operator', null, ['A'], function(a) {
        return ~a;
      }
    ], ['==', '(n %A %B)', ['A', 'B'], function(a, b){ return a == b; }], [
      '===', '(n %A %B)', ['A', 'B'], function(a, b) {
        return a === b;
      }
    ], ['!=', '(N %A %B)', ['A', 'B'], function(a, b){ return a != b; }], [
      '!==', '(N %A %B)', ['A', 'B'], function(a, b) {
        return a !== b;
      }
    ], [
      '<', '(l %A %B)', ['A', 'B'], function(a, b) {
        return a < b;
      }
    ], [
      '<=', '(L %A %B)', ['A', 'B'], function(a, b) {
        return a <= b;
      }
    ], [
      '>', '(g %A %B)', ['A', 'B'], function(a, b) {
        return a > b;
      }
    ], [
      '>=', '(G %A %B)', ['A', 'B'], function(a, b) {
        return a >= b;
      }
    ], [
      '+', '(+ %A %B)', ['A', 'B'], function(a, b) {
        return a + b;
      }
    ], [
      '-', '(- %A %B)', ['A', 'B'], function(a, b) {
        return a - b;
      }
    ], [
      '*', '(* %A %B)', ['A', 'B'], function(a, b) {
        return a * b;
      }
    ], [
      '/', '(/ %A %B)', ['A', 'B'], function(a, b) {
        return a / b;
      }
    ], [
      '%', '(mod %A %B)', ['A', 'B'], function(a, b) {
        return a % b;
      }
    ], [
      'Fails on unsupported binary operators', null, ['A', 'B'], function(a, b) {
        return a >> b;
      }
    ], [
      '&&', '(& %A %B)', ['A', 'B'], function(a, b) {
        return a && b;
      }
    ], [
      '||', '(| %A %B)', ['A', 'B'], function(a, b) {
        return a || b;
      }
    ], [
      'NaN', '#NaN', [], function() {
        return NaN;
      }
    ], [
      'null', '#NaN', [], function() {
        return null;
      }
    ], [
      'Number', '#42', [], function() {
        return 42;
      }
    ], [
      'String', '"string"', [], function() {
        return 'string';
      }
    ], [
      'true', '%TRUE', [], function() {
        return true;
      }
    ], [
      'false', '%FALSE', [], function() {
        return false;
      }
    ]
  ];

  module.exports = {
    map: map
  };

}).call(this);
